Topic: A quickie blag via Mojolicious and Markdown
Date: 2013-03-24

This is the first post to a simple blag I threw together in not much time
using [Mojolicious::Lite](http://metacpan.org/module/Mojolicious::Lite),
[Text::Markdown](http://metacpan.org/module/Text::Markdown),
[Path::Tiny](http://metacpan.org/module/Path::Tiny), and
[List::Objects::WithUtils](http://metacpan.org/module/List::Objects::WithUtils).

The blag itself is available via
[bitbucket](http://bitbucket.org/avenj/blagger) -- 
it is about 200 lines of code.

There is no fancy online editing interface (or any attempt to make it pretty,
yet!). Entries are added by shoving them in the 'posts/' directory; they
follow an extremely simple layout:

    Topic: A one-line description
    Date: YYYY-MM-DD

    ...Markdown content follows...

Yes, everyone and their mother has done this before. I just wanted Markdown...
and to see how quickly a person could knock out such a thing using
Mojolicious::Lite -- pretty damn fast, as it turns out.

I started by describing an object representing a single post. `Path::Tiny` and
`List::Objects::WithUtils` made reading and parsing a post pretty trivial;
`Text::Markdown` converts Markdown post content to HTML I can cache.

For simple object types, I like to use blessed ARRAYs and define some constants 
representing accessible items; it's a bit smaller and faster than the traditional 
HASH-based object, and typos in element access are detected at compile-time:

    package Blag::Post;
    use strict; use warnings;
    use Carp 'confess';
    use List::Objects::WithUtils;
    use Path::Tiny ();
    use Text::Markdown 'markdown';

    sub PATH     () { 0 }
    sub TOPIC    () { 1 }
    sub DATE     () { 2 }
    sub BLAGID   () { 3 }
    sub HTML     () { 4 }
    sub MTIME    () { 5 }

    sub html  { $_[0]->[HTML]  }
    sub path  { $_[0]->[PATH]  }
    sub topic { $_[0]->[TOPIC] }
    sub date  { $_[0]->[DATE]  }
    sub id    { $_[0]->[BLAGID] }
    sub mtime { $_[0]->[MTIME] }

    sub last_edit {
      my ($self) = @_;
      POSIX::strftime("%Y-%m-%d %H:%M:%S",
        localtime( $self->mtime )
      )
    }

The parser relies primarily on `List::Objects::WithUtils` and considers everything 
up to the first blank line to be part of the header:

    sub _parseblag {
      my ($path) = @_;
      confess "Expected a Path::Tiny object"
        unless ref $path and $path->can('lines_utf8');

      my $full = array( $path->lines_utf8 );

      my $header   = $full->items_before(sub { $_ eq "\n" });
      my $contents = $full->items_after(sub { $_ eq "\n" });

      my $topicline =
        $header->grep(sub { index($_[0], 'Topic: ') == 0 })->get(0);
      my $dateline =
        $header->grep(sub { index($_[0], 'Date: ') == 0 })->get(0);

      warn "Malformed blag post at ".$path->absolute
        unless $topicline and $dateline;
      warn "Empty blag post at ".$path->absolute
        unless $contents->count;

      my $topic = substr($topicline, 7);
      warn "Blag post at @{[$path->absolute]} is missing a Topic:\n"
        unless $topic;
      my $date = substr($dateline, 6);
      warn "Blag post at @{[$path->absolute]} is missing a Date:\n"
        unless $date;

      hash(
        topic => $topic,
        date  => $date,
        contents => $contents,
      )
    }

    sub _renderblag {
      my ($contents) = @_;
      markdown( join('', @$contents), { tab_width => 2 } )
    }

The constructor creates a `Path::Tiny` object for a given file, calls
`_parseblag` and `_renderblag`, and caches all of the useful bits:

    sub from_file {
      my ($class, $filepath) = @_;
      confess "Expected a path" unless defined $filepath;

      my $self = [];

      my $file = Path::Tiny::path($filepath);
      confess "Nonexistant post path ($filepath) ".$file->absolute
        unless $file->exists;

      my $item = _parseblag($file);
      my $topic = $item->get('topic');
      my $date  = $item->get('date');

      my $contents = $item->get('contents');
      my $html = _renderblag($contents);

      my ($blagid) = $file->basename =~ /(.+)\.(?:mkdn|blag)$/;

      my $mtime = $file->stat->mtime;

      bless [
        $file,             ## PATH    (Path::Tiny obj, stringifies)
        $topic,            ## TOPIC
        $date,             ## DATE
        $blagid,           ## BLAGID
        $html,             ## HTML
        $mtime,            ## MTIME
      ], $class
    }

These objects need to be tracked by something, so we have a PostList object
that the web application can use to build indexes and find posts; it uses 
`List::Objects::WithUtils` to manage the post list and `Path::Tiny` to walk 
the directory in search of posts:

    package Blag::PostList;
    use strict; use warnings;
    use Carp 'confess';
    use List::Objects::WithUtils;
    use Path::Tiny ();

    sub PATH     () { 0 }
    sub POSTHASH () { 1 }

    sub from_dir {
      my ($class, $dirpath) = @_;

      my $dir = Path::Tiny::path($dirpath);
      my $self = [
        $dir,     ## PATH
        hash,     ## POSTHASH
      ];
      bless $self, $class;

      # Create initial Posts and add hash() of Posts:
      $self->scan;

      $self
    }

Here we find posts ending in .mkdn or .blag and check for a cached Post 
object. If we we have one, we check to see if mtimes match before deciding
whether to serve the cached version or not:

    sub scan {
      my ($self) = @_;
      my $dir = $self->path;

      confess "Not a directory: $dir" unless $dir->is_dir;

      SCAN: for my $child ($dir->children) {
        my $basename = $child->basename;
        my ($maybe_id) = $basename =~ /(.+)\.(?:mkdn|blag)$/;
        next SCAN unless $maybe_id;

        if ( $self->posts->exists($maybe_id) ) {
          my $current = $self->posts->get($maybe_id);
          unless ($current->path->basename eq $child->basename) {
            warn "Possible ID conflict for $maybe_id"
              if $current->path->exists;
          }
          next SCAN if $child->stat->mtime == $current->mtime;
        }

        $self->_reset_post( $maybe_id => $child );
      }

      $self
    }

    sub _reset_post {
      my ($self, $id, $path) = @_;
      my $post = Blag::Post->from_file( $path );
      $self->posts->set( $id => $post );
      $post
    }

We also check mtimes when retrieving a specific post:

    sub get {
      my ($self, $id) = @_;
      my $post = $self->posts->get($id) || return;
      my $old_mtime = $post->mtime;
      my $cur_mtime = $post->path->stat->mtime;
      unless ($old_mtime == $cur_mtime) {
        $post = $self->_reset_post( $id => $post->path )
      }
      $post
    }

A PostList also provides handy sorting methods for building indexes via 
templates:

    sub by_date {
      my ($self) = @_;
      $self->posts->values
        ->sort_by(sub { $_->date })
        ->reverse
    }

    sub by_mtime {
      my ($self) = @_;
      $self->posts->values
        ->sort_by(sub { $_->mtime })
    }

    sub by_topic {
      my ($self) = @_;
      $self->posts->values
        ->sort_by(sub { $_->topic })
    }

And a couple accessors, mostly for its own use:

    sub path  { $_[0]->[PATH]  }
    sub posts { $_[0]->[POSTHASH] }

The actual web application piece is a few lines of Mojolicious::Lite router
directive:

    package main;
    use strict; use warnings;
    use FindBin '$Bin';

    use Mojolicious::Lite;
    plugin 'Config';

    my $cfghash = app->config->{blagcfg} || +{};

    my $postdir = $cfghash->{post_directory} || '%X/posts';
    $postdir =~ s/%X/$Bin/g;

    my $postlist = Blag::PostList->from_dir( $postdir );

    my $blagcfg  = Blag::Cfg->new(%$cfghash);
    helper blagconf => sub { $blagcfg };

    get '/style.css' => sub {
      my $self = shift;
      my $tmpl = $cfghash->{css_template} || 'style';
      $self->render(template => $tmpl, format => 'css')
    };

    get '/' => sub {
      my $self = shift;

      $self->stash( postlist => $postlist->scan );

      my $tmpl = $cfghash->{index_template} || 'index';
      $self->render($tmpl);
    };

    get '/post/:id' => sub {
      my $self = shift;

      my $id   = $self->param('id');
      my $post_meta = $postlist->get($id);
      unless ($post_meta) {
        $self->render( text => 'No such blag!', status => 404 );
        return
      }

      $self->stash( post => $post_meta->post );

      my $tmpl = $cfghash->{post_template} || 'post';
      $self->render($tmpl);
    };

    app->start;

And we're done. (See [bitbucket](http://bitbucket.org/avenj/blagger) for some
example templates to feed the renderer.)
